// Generated by CoffeeScript 1.6.3
(function() {
  var $canvas, $displayQueue, addPoint, bQueue, blist, bpop, bset, buffer, dQueue, dlist, dpop, dset, getter, onMove, registerListener, remover, root, setter, showBox,
    __slice = [].slice;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  /*
  #  Higher order functions which return functions that operate
  #  on the data structures they close over.
  */


  registerListener = function(list, f) {
    return list.push(f);
  };

  buffer = function(size, coll, set, remove) {
    return function(item) {
      set(item);
      if (coll.length > size) {
        remove();
      }
      return coll;
    };
  };

  setter = function(coll, listeners) {
    return function() {
      var items;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      items.forEach(function(i) {
        coll.push(i);
        if (listeners != null) {
          return listeners.forEach(function(l) {
            return l(i);
          });
        }
      });
      return coll;
    };
  };

  remover = function(coll, listeners) {
    return function() {
      var o;
      o = coll.shift();
      if (listeners != null) {
        listeners.forEach(function(l) {
          return l(o);
        });
      }
      return coll;
    };
  };

  getter = function(coll, listeners) {
    return function(index) {
      var i;
      i = coll[index] != null ? coll[index] : void 0;
      if (listeners != null) {
        listeners.forEach(function(l) {
          return l(i);
        });
      }
      return i;
    };
  };

  /*
  #  Queues
  */


  $displayQueue = $('#displayqueue');

  dlist = [];

  dset = setter(dlist, [
    function(i) {
      return $displayQueue.html(JSON.stringify(dlist));
    }
  ]);

  dpop = remover(dlist, []);

  dQueue = buffer(25, dlist, dset, dpop);

  $canvas = $('#drawing');

  blist = [];

  showBox = function(b) {
    return b.showBox();
  };

  addPoint = function(b) {
    return dQueue(b.point);
  };

  bset = setter(blist, [showBox, addPoint]);

  bpop = remover(blist, [
    function(b) {
      b.hideBox();
      return b = null;
    }
  ]);

  bQueue = buffer(25, blist, bset, bpop);

  onMove = function(e) {
    return bQueue(new Box([e.x, e.y], $canvas));
  };

  document.getElementById('drawing').addEventListener('mousemove', onMove);

}).call(this);
